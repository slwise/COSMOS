[include mainsail.cfg]
[include macro.cfg]
[include microprobe.cfg]
[include shell_command.cfg]

[exclude_object]

[save_variables]
filename: ~/printer_data/config/variables.cfg

# This file contains common pin mappings for the BIGTREETECH SKR mini
# E3 v3.0. To use this config, the firmware should be compiled for the
# STM32G0B1 with a "8KiB bootloader" and USB communication.

# The "make flash" command does not work on the SKR mini E3. Instead,
# after running "make", copy the generated "out/klipper.bin" file to a
# file named "firmware.bin" on an SD card and then restart the SKR
# mini E3 with that SD card.

# See docs/Config_Reference.md for a description of parameters.

[stepper_x]
step_pin: PB13
dir_pin: !PB12
enable_pin: !PB14
microsteps: 16
rotation_distance: 40
endstop_pin: ^PC0
position_endstop: 0
position_max: 235
homing_speed: 50

[tmc2209 stepper_x]
uart_pin: PC11
tx_pin: PC10
uart_address: 0
run_current: 0.580
stealthchop_threshold: 999999

[stepper_y]
step_pin: PB10
dir_pin: !PB2
enable_pin: !PB11
microsteps: 16
rotation_distance: 40
endstop_pin: ^PC1
position_endstop: 0
position_max: 235
homing_speed: 50

[tmc2209 stepper_y]
uart_pin: PC11
tx_pin: PC10
uart_address: 2
run_current: 0.580
stealthchop_threshold: 999999

[stepper_z]
step_pin: PB0
dir_pin: PC5
enable_pin: !PB1
microsteps: 16
rotation_distance: 8
endstop_pin: ^PC2
#position_endstop: 0.0
position_max: 320
position_min: -2

[probe]
#z_offset: 0.0

[tmc2209 stepper_z]
uart_pin: PC11
tx_pin: PC10
uart_address: 1
run_current: 0.580
stealthchop_threshold: 999999

[extruder]
step_pin: PB3
dir_pin: !PB4
enable_pin: !PD1
microsteps: 16
rotation_distance: 23.188
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: PC8
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PA0
#control = pid
#pid_kp = 27.788
#pid_ki = 1.971
#pid_kd = 97.954
min_temp: 0
max_temp: 260
max_extrude_only_distance: 200.0
max_extrude_cross_section: 2.5

[tmc2209 extruder]
uart_pin: PC11
tx_pin: PC10
uart_address: 3
run_current: 0.650

[heater_bed]
heater_pin: PC9
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC4
control = pid
pid_kp = 69.333
pid_ki = 1.153
pid_kd = 1042.597
min_temp: 0
max_temp: 130

[heater_fan heatbreak_cooling_fan]
pin: PC7

# This section was added to allow the controller fans to be
# on at 30% when the printer is idle and 100% when printing.

[fan_generic electronics]
pin: PB15
max_power: 1.0
shutdown_speed: 1.0
kick_start_time: 1

[delayed_gcode start_fan_at_idle_speed]
initial_duration: 1.
gcode:
  SET_FAN_SPEED FAN=electronics SPEED=0.3

[duplicate_pin_override]
pins: PB15

# End of section

[heater_fan controller_fan]
pin: PB15

[fan]
pin: PC6

[mcu]
# serial: /dev/serial/by-id/usb-Klipper_stm32g0b1xx_0C0047000450415339373620-if00
serial: /dev/ttyS0
# serial: /dev/ttyAMA0
restart_method: command

[printer]
kinematics: cartesian
max_velocity: 300
max_accel: 3000
max_z_velocity: 5
max_z_accel: 100

[bed_screws]
screw1: 32.5, 32.5
screw2: 202.5, 32.5
screw3: 32.5, 202.5
screw4: 202.5, 202.5

[neopixel cosmos]
pin: PA8
#   The pin connected to the neopixel. This parameter must be
#   provided.
chain_count: 3
#   The number of Neopixel chips that are "daisy chained" to the
#   provided pin. The default is 1 (which indicates only a single
#   Neopixel is connected to the pin).
color_order: GRBW
#   Set the pixel order required by the LED hardware (using a string
#   containing the letters R, G, B, W with W optional). Alternatively,
#   this may be a comma separated list of pixel orders - one for each
#   LED in the chain. The default is GRB.
initial_RED: 0.0
initial_GREEN: 0.0
initial_BLUE: 0.0
initial_WHITE: 0.5
#   See the "led" section for information on these parameters.

[delayed_gcode Ready]
initial_duration: 0.5
gcode:
  SET_LED LED=cosmos RED=0.2 GREEN=0.0 BLUE=0.8 WHITE=0.0 INDEX=3 TRANSMIT=1

[filament_switch_sensor RUNOUT]
pause_on_runout: True
runout_gcode:
     G1 E-100 F5000
insert_gcode:
event_delay: 3.0
pause_delay: 0.5
switch_pin: PC15

[respond]

[output_pin power_detect]
# Pull the pin initially high after starting Klipper
pin: PC13
value: 1
shutdown_value: 0

[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos   : True ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 0.0   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 0.0   ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz   : 2.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
variable_retract          : 1.0   ; the value to retract while PAUSE
variable_cancel_retract   : 1.0   ; the value to retract while CANCEL_PRINT
variable_speed_retract    : 35.0  ; retract speed in mm/s
variable_unretract        : 1.0   ; the value to unretract while RESUME
variable_speed_unretract  : 35.0  ; unretract speed in mm/s
variable_speed_hop        : 15.0  ; z move speed in mm/s
variable_speed_move       : 100.0 ; move speed in mm/s
variable_park_at_cancel   : False ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
variable_park_at_cancel_x : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_park_at_cancel_y : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
# !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
variable_use_fw_retract   : False ; use fw_retraction instead of the manual version [True/False]
variable_idle_timeout     : 0     ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
variable_runout_sensor    : ""    ; If a sensor is defined, it will be used to cancel the execution of RESUME in case no filament is detected.
#                                   Specify the config name of the runout sensor e.g "filament_switch_sensor runout". Hint use the same as in your printer.cfg
# !!! Custom macros, please use with care and review the section of the corresponding macro.
# These macros are for simple operations like setting a status LED. Please make sure your macro does not interfere with the basic macro functions.
# Only  single line commands are supported, please create a macro if you need more than one command.
variable_user_pause_macro : ""    ; Everything inside the "" will be executed after the klipper base pause (PAUSE_BASE) function
variable_user_resume_macro: ""    ; Everything inside the "" will be executed before the klipper base resume (RESUME_BASE) function
variable_user_cancel_macro: ""    ; Everything inside the "" will be executed before the klipper base cancel (CANCEL_PRINT_BASE) function
gcode:

[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,
    EXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>

# See the sample-lcd.cfg file for definitions of common LCD displays.

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [probe]
#*# z_offset = 1.339
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	  0.046000, -0.011500, -0.019000, -0.000250
#*# 	  -0.026500, -0.079000, -0.107750, -0.092750
#*# 	  -0.021500, -0.064000, -0.074000, -0.060250
#*# 	  0.028500, 0.017250, -0.002750, 0.018500
#*# x_count = 4
#*# y_count = 4
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = lagrange
#*# tension = 0.2
#*# min_x = 20.0
#*# max_x = 179.99
#*# min_y = 20.0
#*# max_y = 209.99
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 26.859
#*# pid_ki = 2.058
#*# pid_kd = 87.626
#*#
#*# [stepper_z]
#*# position_endstop = 0.145
